# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/python:2.7.15-stretch
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: copy ssh key
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI / kops / kubectl
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            curl -SLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: "Build & Push Docker Image, rollout on K8s and test"
          command: |
            set -x

            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            PRIV_PATH="config/priv_validator_key.json"
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAME == "master") ]]; then
              BRANCH_NAME="stage"
              K8S_CLUSTER="hub"
              CHARTMUSEUM_URL="http://chart.dccn.ankr.com:8080"
              AWS_ZONE=us-west-2a
              ACM_REGION="us-west-2"
              ANKRCHAIN_DNS="chain.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_STAGE
            elif [[ ($BRANCH_NAME == "develop") ]]; then
              BRANCH_NAME="dev"
              K8S_CLUSTER="stage.hub"
              CHARTMUSEUM_URL="http://chart-stage.dccn.ankr.com:8080"
              ACM_REGION="us-west-1"
              ANKRCHAIN_DNS="chain-stage.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_STAGE
            else
              BRANCH_NAME="feat"
              K8S_CLUSTER="dev.hub"
              CHARTMUSEUM_URL="http://chart-dev.dccn.ankr.com:8080"
              ACM_REGION="us-west-1"
              ANKRCHAIN_DNS="chain-dev.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_DEV
            fi

            docker build --label=ankrchain --target=public --build-arg BRANCH_NAME=${BRANCH_NAME} --build-arg PRIV_PATH=${PRIV_PATH} --build-arg BRANCH_NAME=${BRANCH_NAME} -t ankr-chain:$BRANCH_NAME . -f DOCKER/Dockerfile
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag ankr-chain:$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:$TAG
            done

            docker build --label=ankrchain --target=hub --build-arg BRANCH_NAME=${BRANCH_NAME} --build-arg PRIV_PATH=${PRIV_PATH} -t ankr-chain:hub-$BRANCH_NAME . -f DOCKER/Dockerfile
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag ankr-chain:hub-$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:hub-$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:hub-$TAG
            done

            # upgrade ankrchain in daemon side
            CHARTS_JSON=$(curl -s $CHARTMUSEUM_URL/ankr/daemon/api/charts)
            ANKRCHAIN_TGZ=$(echo -e ${CHARTS_JSON//\"/\\n} | grep charts/ankr-chain-)

            mkdir chart_tmp && cd chart_tmp
            TGZ_FILE=${ANKRCHAIN_TGZ//charts\/}
            curl -SLf $CHARTMUSEUM_URL/ankr/daemon/charts/$TGZ_FILE | tar xz
            DIR=$(ls)
            sed -i~ -E "s/tag: .*/tag: $BRANCH_NAME$DATE/" $DIR/values.yaml
            tar czf $TGZ_FILE $DIR
            # TODO: support authenticate
            curl --data-binary "@$TGZ_FILE" $CHARTMUSEUM_URL/ankr/daemon/api/charts
            rm -rf $TGZ_FILE $DIR
            cd ..

            # change AWS ZONE
            if [[ ! -z $AWS_ZONE ]]; then
              sed -i~ -E "s/zone: .*/zone: $AWS_ZONE/" k8s/create-pvc.yaml
            fi

            # upgrade ankrchain in hub side
            kops export kubecfg --name ${K8S_CLUSTER}.k8s.ankr.network --state s3://kops.${K8S_CLUSTER}.config
            kubectl apply -f k8s/create-pvc.yaml
            kubectl apply -f k8s/ankrchain-svc.yaml

            if [[ ($BRANCH_NAME == "master") ]]; then
              kubectl set image ankrchain=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:$BRANCH_NAME$DATE \
                -f k8s/ankrchain-prod.yaml --local -o yaml > k8s/ankrchain-patched.yaml
            else
              kubectl set image ankrchain=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:hub-$BRANCH_NAME$DATE \
                -f k8s/ankrchain.yaml --local -o yaml > k8s/ankrchain-patched.yaml
            fi
            if [[($BRANCH_NAME == "dev")]]; then
                docker build --no-cache -f DOCKER/DockerfileTest --build-arg TENDERMINT_DNS=${TENDERMINT_DNS} -t tester.test:$BRANCH_NAME .
                for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
                  docker tag tester.test:$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:tester.test-hub-$TAG
                  docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:tester.test-hub-$TAG
                done
                kubectl set image ankrchain=$AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:tester.test-hub-$BRANCH_NAME$DATE \
                  -f ankrchain-tester.yaml --local -o yaml > ankrchain-tester.yaml
            fi
            # add page break line before new deployment, not compatible with bsd style command line tool, eg: macOS
            # add colon to separate with json in annotation
            sed -i '/apiVersion:/i---' k8s/ankrchain-patched.yaml
            sed -i "/name: TXHISTORY_DB_TYPE/a\ \ \ \ \ \ \ \ \ \ value: \'${TXHISTORY_DB_TYPE}\'" k8s/ankrchain-patched.yaml
            sed -i "/name: TXHISTORY_DB_HOST/a\ \ \ \ \ \ \ \ \ \ value: \'${TXHISTORY_DB_HOST}\'" k8s/ankrchain-patched.yaml
            sed -i "/name: TXHISTORY_DB_NAME/a\ \ \ \ \ \ \ \ \ \ value: \'${TXHISTORY_DB_NAME}\'" k8s/ankrchain-patched.yaml
            cat k8s/ankrchain-patched.yaml
            kubectl apply -f k8s/ankrchain-patched.yaml

            for i in 1 2 3 4; do
              if ! kubectl rollout status statefulset/ankrchain-$i --watch=true --timeout=120s; then
                echo "Deploy failed, roll back to previous version"
                kubectl rollout undo statefulset/ankrchain-$i
              fi
            done
            kubectl get all
            # update load balancer cert
            sleep 60
            ANKRCHAIN_SVC=$(kubectl get svc --no-headers=true ankr-chain|awk '{print $4}')
            ANKRCHAIN_ELB=$(kubectl get svc --no-headers=true ankr-chain|awk '{print $4}'|cut -d'-' -f1)
            ANKRCHAIN_ACM_ARN=$(aws acm list-certificates --region ${ACM_REGION} --query CertificateSummaryList[].[CertificateArn,DomainName] --output text | grep ${ANKRCHAIN_DNS} | cut -f1)
            ANKRCHAIN_ELB_ARN=$(aws elbv2 describe-load-balancers --region $ACM_REGION --query LoadBalancers[].[LoadBalancerName,LoadBalancerArn] --output text|grep $ANKRCHAIN_ELB|cut -f2)
            ANKRCHAIN_TLS_ARN=$(aws elbv2 describe-listeners --load-balancer-arn $ANKRCHAIN_ELB_ARN --region ${ACM_REGION} --query Listeners[].[ListenerArn,Port] --output text|awk '{if($2=='443'){print $1}}')
            aws elbv2 modify-listener --region $ACM_REGION --listener-arn $ANKRCHAIN_TLS_ARN --protocol TLS --ssl-policy ELBSecurityPolicy-2016-08 --certificates CertificateArn=$ANKRCHAIN_ACM_ARN
            # set route53
            ELB_HOST_ZONE_ID=$(aws elbv2 describe-load-balancers --region $ACM_REGION --query LoadBalancers[].[CanonicalHostedZoneId,LoadBalancerArn] --output text | grep ${ANKRCHAIN_ELB} | cut -f1)
            DNS_HOSTED_ZONE_ID=$(aws route53 list-hosted-zones-by-name | grep -B 1 -e "ankr.com" | sed 's/.*hostedzone\/\([A-Za-z0-9]*\)\".*/\1/' | head -n 1 )
            INPUT_JSON_STR="{\"ChangeBatch\":{\"Comment\":\"Update\",\"Changes\":[{\"Action\":\"UPSERT\",\"ResourceRecordSet\":{\"Name\":\"${ANKRCHAIN_DNS}\",\"Type\":\"A\",\"AliasTarget\":{\"HostedZoneId\":\"${ELB_HOST_ZONE_ID}\",\"DNSName\":\"${ANKRCHAIN_SVC}\",\"EvaluateTargetHealth\":true}}}]}}"
            aws route53 change-resource-record-sets --hosted-zone-id ${DNS_HOSTED_ZONE_ID} --cli-input-json ${INPUT_JSON_STR}

            if [[ ($BRANCH_NAME == "dev") ]]; then
              kubectl apply -f k8s/ankr-chain-tester.yaml
              sleep 240
              results=`kubectl get pods | grep dccn-ankr-chain-test | awk '{print $3}'`
              for res in $results;do
                if [ "Error" != $res ];then
                  echo "test case successful"
                else
                  testResults=`kubectl get pods | grep dccn-ankr-chain-test | awk '{print $1}'`
                  for testRes in $testResults;do
                    echo "test case failure"
                    kubectl logs $testRes
                      break;
                  done
                fi
                break
              done
              kubectl delete job dccn-ankr-chain-test
            fi

            wget https://github.com/digitalocean/doctl/releases/download/v1.23.1/doctl-1.23.1-linux-amd64.tar.gz
            tar xf doctl-1.23.1-linux-amd64.tar.gz
            sudo mv doctl /usr/local/bin
            mkdir -p ~/.config/doctl/
            aws s3 cp s3://ankr.digitalocean.kubeconfig/dok8sconfig ~/.config/doctl/config.yaml
            chmod 0600 ~/.config/doctl/config.yaml
            clustersNames="ankr-chain-stage-1 ankr-chain-stage-2 ankr-chain-prod-3 ankr-chain-prod-2 ankr-chain-prod-1"
            for cluster in $clustersNames;do
                doctl kubernetes cluster kubeconfig save $cluster
            done
            if [[ ($BRANCH_NAME == "master") ]]; then
               clusters="do-nyc1-ankr-chain-prod-1 do-sfo2-ankr-chain-prod-2 do-sgp1-ankr-chain-prod-3"
               for clu in $clusters; do
                  kubectl config use-context $clu
                  kubectl apply -f k8s/ankrchain-digital-prod.yaml
                  kubectl apply -f k8s/ankrchain-digital-svc.yaml
               done
            elif [[ ($BRANCH_NAME == "feat") ]]; then
               clusters="do-sfo2-ankr-chain-stage-1 do-nyc1-tendermint-stage-2"
               for clu in $clusters; do
                  kubectl config use-context $clu
                  kubectl apply -f k8s/ankrchain-digital-stage.yaml
                  kubectl apply -f k8s/ankrchain-digital-svc.yaml
               done
            else
                 echo "BRANCH_NAME is " $BRANCH_NAME
            fi