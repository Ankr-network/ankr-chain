# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    docker:
      # Build in Python container to install AWS CLI
      - image: circleci/python:2.7.15-stretch
    working_directory: ~/app
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: copy ssh key
          command: |
            cp ${HOME}/.ssh/id_rsa id_rsa
      - run:
          name: Install AWSCLI / kops / kubectl
          command: |
            curl "https://s3.amazonaws.com/aws-cli/awscli-bundle.zip" -o "awscli-bundle.zip"
            unzip awscli-bundle.zip
            sudo ./awscli-bundle/install -i /usr/local/aws -b /usr/local/bin/aws
            wget -O kops https://github.com/kubernetes/kops/releases/download/$(curl -s https://api.github.com/repos/kubernetes/kops/releases/latest | grep tag_name | cut -d '"' -f 4)/kops-linux-amd64
            chmod +x ./kops
            sudo mv ./kops /usr/local/bin/kops
            curl -SLO https://storage.googleapis.com/kubernetes-release/release/$(curl -s https://storage.googleapis.com/kubernetes-release/release/stable.txt)/bin/linux/amd64/kubectl
            chmod +x ./kubectl
            sudo mv ./kubectl /usr/local/bin/kubectl
      - run:
          name: "Log in to AWS ECR"
          command: eval $(aws ecr get-login --no-include-email --region $AWS_REGION)
      - run:
          name: "Build & Push Docker Image, rollout on K8s and test"
          command: |
            set -x

            BRANCH_NAME=$(git rev-parse --abbrev-ref HEAD)
            SHA1_SHORT=$(git rev-parse --short HEAD)
            PRIV_PATH="config/priv_validator_key.json"
            DATE=`date +%Y%m%d%H%M%S`
            if [[ ($BRANCH_NAME == "master") ]]; then
              BRANCH_NAME="stage"
              K8S_CLUSTER="hub"
              CHARTMUSEUM_URL="http://chart.dccn.ankr.com:8080"
              AWS_ZONE=us-west-2a
              ACM_REGION="us-west-2"
              ANKRCHAIN_DNS="chain.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_STAGE
            elif [[ ($BRANCH_NAME == "develop") ]]; then
              BRANCH_NAME="dev"
              K8S_CLUSTER="stage.hub"
              CHARTMUSEUM_URL="http://chart-stage.dccn.ankr.com:8080"
              ACM_REGION="us-west-1"
              ANKRCHAIN_DNS="chain-stage.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_STAGE
            else
              BRANCH_NAME="feat"
              K8S_CLUSTER="dev.hub"
              CHARTMUSEUM_URL="http://chart-dev.dccn.ankr.com:8080"
              ACM_REGION="us-west-1"
              ANKRCHAIN_DNS="chain-dev.dccn.ankr.com"
              TXHISTORY_DB_HOST=$TXHISTORY_MYSQLHOST_DEV
            fi
            sed -i "s/seeds = \"\"/$SEEDS/"  DOCKER/tmhome/config/config.$BRANCH_NAME.toml
            docker build --label=ankrchain --target=public --build-arg BRANCH_NAME=${BRANCH_NAME} --build-arg PRIV_PATH=${PRIV_PATH} --build-arg BRANCH_NAME=${BRANCH_NAME} -t ankr-chain:$BRANCH_NAME . -f DOCKER/Dockerfile
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag ankr-chain:$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:$TAG
            done

            docker build --label=ankrchain --target=hub --build-arg BRANCH_NAME=${BRANCH_NAME} --build-arg PRIV_PATH=${PRIV_PATH} -t ankr-chain:hub-$BRANCH_NAME . -f DOCKER/Dockerfile
            for TAG in $BRANCH_NAME $SHA1_SHORT $BRANCH_NAME$DATE; do
              docker tag ankr-chain:hub-$BRANCH_NAME $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:hub-$TAG
              docker push $AWS_ACCOUNT.dkr.ecr.$AWS_REGION.amazonaws.com/ankr-chain:hub-$TAG
            done


